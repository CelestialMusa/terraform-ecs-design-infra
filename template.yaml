apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: AWS-ECS-Template
  title: Terraform ECS template 
  description: Scaffolder template for ECS infrastructure
spec:
  owner: web@example.com
  type: website

  parameters:
    - title: Fill details for your backstage component
      required:
        - component_id
        - owner
      properties:
        component_id:
          title: Name
          type: string
          description: Unique name of the application
          ui:autofocus: true
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
    - title: Fill in details for your AWS resource tags
      required:
        - team_code
        - app_id
        - cost_centre
        - team_email_address
        - map_migrated
        - application_name
        - environment
        - data_confidentiality
      properties:
        team_code:
          title: Team code
          type: string
          description: Team code allocated upon creation of your AWS account
          ui:autofocus: true
        app_id:
          title: Application ID
          type: string
          description: Application ID assigned on service now.
        cost_centre:
          title: Cost centre
          type: string
          description: Cost centre of your team/department.
        team_email_address:
          title: Team email address
          type: string
          description: Email address where alerts and notifications regarding your AWS infrastructure could be sent.
        map_migrated:
          title: Map migrated
          type: string
          description: Tag for migrated services, used to earn service credits
        application_name:
          title: Application name
          type: string
          description: Name of the application
        environment:
          title: Environment
          type: string
          enum:
            - Dev
            - UAT
            - Prod
        data_confidentiality:
          title: Data confidentiality
          type: string
          enum:
            - Unrestricted
            - Internal Only
            - Confidential
            - Secret
    - title: Choose a location
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
  
  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./skeleton
        values:
          component_id: ${{parameters.component_id}}
          owner: ${{parameters.owner}}
          environment: ${{parameters.environment}}
          application_name: ${{parameters.application_name}}
          app_id: ${{parameters.app_id}}
          team_code: ${{parameters.team_code}}
          cost_centre: ${{parameters.cost_centre}}
          team_email_address: ${{parameters.team_email_address}}
          data_confidentiality: ${{parameters.data_confidentiality}}
          map_migrated: ${{parameters.map_migrated}}

    - id: fetch-docs
      name: Fetch Docs
      action: fetch:plain
      input:
        targetPath: ./community
        url: https://github.com/backstage/community/tree/main/backstage-community-sessions

    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{parameters.component_id}}
        repoUrl: ${{parameters.repoUrl}}
        repoVisibility: internal

    - id: register-github-runner
      name: Register runner
      action: http-request
      input:
        repoUrl: ${{steps.publish.output.remoteUrl}}

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{steps.publish.output.repoContentsUrl}}
        catalogInfoPath: '/catalog-info.yaml'

  output:
    remoteUrl: ${{steps.publish.output.remoteUrl}}
    entityRef: ${{steps.register.output.entityRef}}



